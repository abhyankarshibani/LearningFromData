%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% LDA traingin
%%%%%%%%%%%%%%%%%%%%%%%%%%%

size_train =length(TrainLabels);
[m,m1] = size(TrainData);
cov_f =zeros(m1);
un_1 = length(unique(TrainLabels));
training = cell(numofClass,1);

for i =1:numofClass
   a=0;
    for k=1:size_train
                        
        if TrainLabels(k) == i
            a=a+1;
            temp(a,:) = TrainData(k,:);
           
            
        end
    end
    num(i) =a;
    training(i,1) ={temp([1:a],:)};                     % separating the training data into the number of classes matrix
end 

for k=1:numofClass
    Mu(k,:) = mean(training{k,1});                                  % calculate mean
    pi(k,1) = num(k)/size_train;                                %calculate prob
    covt(:,:) = cov(training{k,1}) .*pi(k,1);
    
    cov_f(:,:) = cov_f(:,:) + covt(:,:);                %Calculate covariance
end

TrainedLDAPara = struct('MU',Mu,'pi',pi,'cov',cov_f);            % trained module structure

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Testing of LDA Model
% Function provides as input 
% i. Test_Data a number of samples x number of features matrix
% ii. LDAPara a structure containing LDA model parameters got from training
% iii. No of classes to classify
% It returns Y_labels
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

test_len = length(Test_Data);
eq = zeros(number_of_class,1);
for k= 1:test_len
     for j = 1:number_of_class
	se=[];
	se = LDAPara.MU(j,:) * (inv(LDAPara.cov));
   	 eq(j,1) = se * Test_Data(k,:)' - 0.5*(se*LDAPara.MU(j,:)') +log(LDAPara.pi(j,1));               
        end              
      [~,I] = max(eq);                                                                      % index of maximum value
      LDA_tested(k,1) = I;

end
[Y_label] = LDA_tested;                   %predicted class
